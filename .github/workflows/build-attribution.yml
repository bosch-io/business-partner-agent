name: License Attribution

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - '**'
  release:
    types:
      - published

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      # Setup Phase

      - name: Setup node and install deps
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          check-latest: true
      - run: npm --prefix frontend ci --legacy-peer-deps

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          check-latest: true
          cache: 'maven'

      - name: Prepare docker tags for license image
        id: preparetagslicense
        uses: docker/metadata-action@v4
        if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
        with:
          images: ghcr.io/hyperledger-labs/business-partner-agent-license
          tags: |
            type=ref,event=tag
            type=edge,branch=main
            type=sha

      # Build phase

      - name: Build maven-license-plugin
        run: mvn -f bin/license-maven-plugin/pom.xml clean editorconfig:format install -DskipITs=true -DskipTests=true

      # Attribution Phase

      - name: Frontend attribution
        run: npm --prefix frontend run license

      - name: Backend attribution
        run: mvn -f backend/pom.xml compile -Pbackend-license

      # Docker Phase (triggered only on main or tag)

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner}}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push license container
        uses: docker/build-push-action@v4
        if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
        with:
          context: .
          push: true
          file: Dockerfile.license
          tags: ${{ steps.preparetagslicense.outputs.tags }}